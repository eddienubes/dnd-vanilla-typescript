(()=>{"use strict";var t,e=function(){function t(t,e,n,r){this.templateElement=document.getElementById(t),this.hostElement=document.getElementById(e);var o=document.importNode(this.templateElement.content,!0);this.element=o.firstElementChild,r&&(this.element.id=r),this.attach(n)}return t.prototype.attach=function(t){this.hostElement.insertAdjacentElement(t?"afterbegin":"beforeend",this.element)},t}();function n(t){var e=!0;return t.required&&null!=t.value&&(e=e&&0!==t.value.toString().trim().length),null!=t.minLength&&"string"==typeof t.value&&(e=e&&t.value.trim().length>=t.minLength),null!=t.maxLength&&"string"==typeof t.value&&(e=e&&t.value.trim().length<=t.maxLength),null!=t.min&&"number"==typeof t.value&&(e=e&&t.value>=t.min),null!=t.max&&"number"==typeof t.value&&(e=e&&t.value<=t.max),e}function r(t,e,n){var r=n.value;return{enumerable:!0,configurable:!0,get:function(){return r.bind(this)}}}!function(t){t[t.Active=0]="Active",t[t.Finished=1]="Finished"}(t||(t={}));var o,i=function(t,e,n,r,o){this.id=t,this.title=e,this.description=n,this.people=r,this.status=o},l=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(e){function n(){var t=e.call(this)||this;return t.projects=[],t.draggable=null,t}return l(n,e),Object.defineProperty(n.prototype,"currentDraggable",{get:function(){return Object.create(this.draggable)},set:function(t){this.draggable=Object.create(t)},enumerable:!1,configurable:!0}),n.prototype.addProject=function(e,n,r){var o=new i(Math.random().toString(),e,n,r,t.Active);this.projects.push(o);for(var l=0,a=this.listeners;l<a.length;l++)(0,a[l])(this.projects.slice())},n.getInstance=function(){return this.instance?this.instance:new n},n.prototype.moveProject=function(t,e){var n=this.projects.find((function(e){return e.id===t}));n&&n.status!==e&&(n.status=e,this.updateListeners())},n.prototype.updateListeners=function(){for(var t=0,e=this.listeners;t<e.length;t++)(0,e[t])(this.projects.slice())},n}(function(){function t(){this.listeners=[]}return t.prototype.addListener=function(t){this.listeners.push(t)},t}()).getInstance(),s=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),c=function(t){function e(){var e=t.call(this,"project-input","app",!0,"user-input")||this;return console.log("Rendered projects input!"),e.titleInputElement=e.element.querySelector("#title"),e.descriptionInputElement=e.element.querySelector("#description"),e.peopleInputElement=e.element.querySelector("#people"),e.configure(),e}return s(e,t),e.prototype.gatherUserInput=function(){var t=this.titleInputElement.value,e=this.descriptionInputElement.value,r=this.peopleInputElement.value,o={value:e,required:!0},i={value:+r,required:!0,min:2,max:6};return n({value:t,required:!0})&&n(o)&&n(i)?[t,e,+r]:void alert("Invalid input, please try again")},e.prototype.configure=function(){this.element.addEventListener("submit",this.submitHandler)},e.prototype.renderContent=function(){},e.prototype.submitHandler=function(t){t.preventDefault();var e=this.gatherUserInput();if(Array.isArray(e)){var n=e[0],r=e[1],o=e[2];a.addProject(n,r,o),this.clearInputs()}},e.prototype.clearInputs=function(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""},function(t,e,n,r){var o,i=arguments.length,l=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(l=(i<3?o(l):i>3?o(e,n,l):o(e,n))||l);i>3&&l&&Object.defineProperty(e,n,l)}([r],e.prototype,"submitHandler",null),e}(e),u=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(t,e,n,r){var o,i=arguments.length,l=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(l=(i<3?o(l):i>3?o(e,n,l):o(e,n))||l);return i>3&&l&&Object.defineProperty(e,n,l),l},f=function(t){function e(e,n){var r=t.call(this,"single-project",e,!1,n.id)||this;return r.project=n,r.configure(),r.renderContent(),r}return u(e,t),Object.defineProperty(e.prototype,"persons",{get:function(){return 1===this.project.people?"1 person":this.project.people+" persons"},enumerable:!1,configurable:!0}),e.prototype.configure=function(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)},e.prototype.renderContent=function(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description},e.prototype.dragStartHandler=function(t){t.dataTransfer.setData("text/plain",JSON.stringify({id:this.project.id,status:this.project.status})),t.dataTransfer.effectAllowed="move",a.currentDraggable=this.project},e.prototype.dragEndHandler=function(t){console.log("Drag has ended!"),a.currentDraggable=null},p([r],e.prototype,"dragStartHandler",null),p([r],e.prototype,"dragEndHandler",null),e}(e),d=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),h=function(t,e,n,r){var o,i=arguments.length,l=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(l=(i<3?o(l):i>3?o(e,n,l):o(e,n))||l);return i>3&&l&&Object.defineProperty(e,n,l),l},y=function(e){function n(n){var r=e.call(this,"project-list","app",!1,(n===t.Active?"active":"finished")+"-projects")||this;return r.type=n,r.assignedProjects=[],console.log("Rendered projects list! ",n),r.configure(),r.renderContent(),r}return d(n,e),n.prototype.renderContent=function(){this.element.querySelector("ul").id=(this.type===t.Active?"active":"finished")+"-projects-list",this.element.querySelector("h2").textContent=t[this.type]+" PROJECTS"},n.prototype.configure=function(){var t=this;a.addListener((function(e){t.assignedProjects=e.filter((function(e){return e.status===t.type})),t.renderProjects()})),this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragenter",this.dragEnterHandler)},n.prototype.renderProjects=function(){document.getElementById((this.type===t.Active?"active":"finished")+"-projects-list").innerHTML="";for(var e=0,n=this.assignedProjects;e<n.length;e++){var r=n[e];new f(this.element.querySelector("ul").id,r)}},n.prototype.dragOverHandler=function(t){t.dataTransfer&&"text/plain"===t.dataTransfer.types[0]&&(this.element.querySelector("ul").classList.add("droppable"),t.preventDefault())},n.prototype.dropHandler=function(t){var e=JSON.parse(t.dataTransfer.getData("text/plain")).id;a.moveProject(e,this.type),this.element.querySelector("ul").classList.remove("droppable")},n.prototype.dragLeaveHandler=function(t){this.element.querySelector("ul").classList.remove("droppable"),console.log("leave")},n.prototype.dragEnterHandler=function(t){t.preventDefault(),t.stopPropagation(),a.currentDraggable&&this.type!==a.currentDraggable.status&&t.preventDefault()},h([r],n.prototype,"dragOverHandler",null),h([r],n.prototype,"dropHandler",null),h([r],n.prototype,"dragLeaveHandler",null),h([r],n.prototype,"dragEnterHandler",null),n}(e);new c,new y(t.Active),new y(t.Finished)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,